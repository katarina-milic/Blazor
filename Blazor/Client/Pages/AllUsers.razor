@page "/fetchusers"
@using Blazor.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using Microsoft.AspNetCore.Blazor
@inject HttpClient Http

<h1 id="naslov2">Korisnici</h1>

<div class="form-inline">
    <label class="sr-only" for="filter-name"> Filter </label>
    <input type="text" style="margin-right:100px ; width:400px" class="form-control"  @onchange="OnNameChanged" oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" placeholder="Pronadjite zeljenog korisnika.." />
    <button type="button" class="btnSacuvaj" @onclick="Nazad"> Vrati korisnike </button>
</div>
@*<Pagination TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
    SelectedPage="SelectedPage"></Pagination>*@


@if (korisnici == null)
{
    <p id="tekst"><em>Loading...</em></p>
}
else
{

    <table id="grad" class="table">
        <thead>
            <tr>
                <th>Ime</th>
                <th>Prezime</th>
                <th>E-mail</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var user in korisnici)
            {
                <tr>

                    <td>@user.FirstName</td>

                    <td>@user.LastName</td>

                    <td>@user.Email</td>

                    <td> <a href="/edituser/@user.Id" style=" color:rgb(76, 255, 0)">Izmeni</a></td>
                    <td><button class="btnDelete" @onclick="(async () => await DeleteUser(user.Id))">Obrisi</button></td>

                </tr>
            }
        </tbody>
    </table>
}


@code {
    //   List<User> users { get; set; }
    User[] korisnici;
    private int totalPageQuantity;
    private int currentPage = 1;
    User user = new User();

    private string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        korisnici = await Http.GetJsonAsync<User[]>("/api/User/Index");
        
    }
  
    // POMOCNE FUNKCIJE
    void OnEmailChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        userFilter(values, "Email");
    }

    void OnLastNameChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        userFilter(values, "Prezime");
    }
    void OnNameChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        userFilter(values, "Ime");
    }



    protected async Task userFilter(String Value, string columnName)
    {
        korisnici = await Http.GetJsonAsync<User[]>("/api/User/Index");

        if (Value.Trim().Length > 0)
        {
            switch (columnName)
            {
                case "Ime":
                    korisnici = korisnici.Where(x => x.FirstName.Contains(Value)).ToArray();
                    break;

                case "Prezime":
                    korisnici = korisnici.Where(x => x.LastName.Contains(Value)).ToArray();
                    break;
                case "Email":
                    korisnici = korisnici.Where(x => x.Email.Contains(Value)).ToArray();
                    break;

                default:
                    korisnici = await Http.GetJsonAsync<User[]>("/api/User/Index");
                    break;
            }
        }
        else
        {
            korisnici = await Http.GetJsonAsync<User[]>("/api/User/Index");
        }
    }

    protected async Task Nazad()
      {
           NavigationManager.NavigateTo("/fetchusers");
          
      }

    protected async Task DeleteUser(int id)
    {
        await Http.DeleteAsync($"api/User/Delete/{id}");
        RedirectToIndex();

    }
 
    void RedirectToIndex()
    {
        NavigationManager.NavigateTo("/deletedpageuser");
    }
  
}
